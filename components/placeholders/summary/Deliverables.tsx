// components/PresentationManager.tsx

import React, { useState } from 'react';
import { FiFileText, FiChevronDown, FiChevronUp } from "react-icons/fi";

interface Presentation {
  id: number;
  name: string;
  version: number;
  generatedBy: string;
  status: 'Generating texts' | 'Generating PDF' | 'Available';
}

const initialPresentations: Presentation[] = [
  { id: 1, name: 'Presentation 1', version: 1, generatedBy: 'User A', status: 'Available' },
  { id: 2, name: 'Presentation 2', version: 2, generatedBy: 'User B', status: 'Generating PDF' },
  { id: 3, name: 'Presentation 3', version: 3, generatedBy: 'User C', status: 'Generating texts' },
  { id: 4, name: 'Presentation 4', version: 4, generatedBy: 'User D', status: 'Available' },
  { id: 5, name: 'Presentation 5', version: 5, generatedBy: 'User E', status: 'Generating PDF' },
];

const PresentationManager = () => {
  const [presentations, setPresentations] = useState<Presentation[]>(initialPresentations);
  const [isCreating, setIsCreating] = useState(false);
  const [step, setStep] = useState(1);
  const [prompt, setPrompt] = useState('');
  const [language, setLanguage] = useState('English');
  const [collapsedSlides, setCollapsedSlides] = useState([false, false, false]);

  // Handle form submission for creating a new presentation
  const handleNextStep = () => setStep((prev) => prev + 1);
  const handlePreviousStep = () => setStep((prev) => prev - 1);

  const handleCreatePresentation = () => {
    setIsCreating(true);
    setStep(1);
  };

  const toggleCollapseSlide = (index: number) => {
    setCollapsedSlides((prev) => {
      const newSlides = [...prev];
      newSlides[index] = !newSlides[index];
      return newSlides;
    });
  };

  const renderProgress = () => (
    <div className="w-full bg-gray-200 h-2 rounded-full mt-4">
      <div className={`h-full bg-blue-500 rounded-full`} style={{ width: `${(step / 3) * 100}%` }}></div>
    </div>
  );

  return (
    <div className="grid grid-cols-3 gap-6 p-6">
      {/* Left Column: Presentation List */}
      <div className="col-span-1 bg-white rounded-lg shadow px-4">
        <h2 className="text-xl font-semibold mb-4">Presentations</h2>
        <ul className="space-y-4">
          {presentations.map((presentation) => (
            <li key={presentation.id} className="flex justify-between items-center bg-gray-100 p-3 rounded-lg">
              <div>
                <div className="font-semibold">{presentation.name}</div>
                <div className="text-sm text-gray-600">Version: {presentation.version}</div>
                <div className="text-sm text-gray-600">Generated by: {presentation.generatedBy}</div>
              </div>
              <span className={`px-2 py-1 rounded-lg text-xs ${presentation.status === 'Available' ? 'bg-green-100 text-green-600' : 'bg-yellow-100 text-yellow-600'}`}>
                {presentation.status}
              </span>
            </li>
          ))}
        </ul>
        <button
          onClick={handleCreatePresentation}
          className="w-full mt-6 bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600"
        >
          Create New Presentation
        </button>
      </div>

      {/* Right Column: PDF Viewer or Form */}
      <div className="col-span-2 bg-white rounded-lg shadow p-4">
        {isCreating ? (
          <div>
            {renderProgress()}

            {step === 1 && (
              <div className="mt-6">
                <h2 className="text-xl font-semibold">Step 1: Customize your presentation</h2>
                <div className="mt-4">
                  <label className="block mb-2">Prompt</label>
                  <input
                    type="text"
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    className="w-full p-2 border rounded-md"
                    placeholder="Customize your presentation"
                  />
                </div>
                <div className="mt-4">
                  <label className="block mb-2">Language</label>
                  <select
                    value={language}
                    onChange={(e) => setLanguage(e.target.value)}
                    className="w-full p-2 border rounded-md"
                  >
                    <option value="English">English</option>
                    <option value="Spanish">Spanish</option>
                  </select>
                </div>
                <div className="mt-6 flex justify-between">
                  <button className="bg-gray-300 text-gray-700 py-2 px-4 rounded-md" onClick={handlePreviousStep} disabled={step === 1}>
                    Back
                  </button>
                  <button className="bg-blue-500 text-white py-2 px-4 rounded-md" onClick={handleNextStep}>
                    Next
                  </button>
                </div>
              </div>
            )}

            {step === 2 && (
              <div className="mt-6">
                <h2 className="text-xl font-semibold">Step 2: Deliverables</h2>
                <p className="text-gray-700 mt-4">Customize each slide:</p>
                <div className="space-y-4 mt-4">
                  {[1, 2, 3].map((slide, index) => (
                    <div key={slide} className="border border-gray-300 rounded-lg">
                      <button
                        onClick={() => toggleCollapseSlide(index)}
                        className="w-full text-left text-gray-900 font-semibold p-3 flex justify-between items-center"
                      >
                        <span>Slide {slide}</span>
                        {collapsedSlides[index] ? <FiChevronUp /> : <FiChevronDown />}
                      </button>

                      {collapsedSlides[index] && (
                        <div className="p-4 bg-white border-t">
                          <div className="mb-4">
                            <label className="block mb-2">Title</label>
                            <input
                              type="text"
                              className="w-full p-2 border rounded-md"
                              placeholder="Enter title"
                            />
                          </div>
                          <div className="mb-4">
                            <label className="block mb-2">Content</label>
                            <textarea
                              className="w-full p-2 border rounded-md"
                              placeholder="Enter content"
                              rows={4}
                            />
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
                <div className="mt-6 flex justify-between">
                  <button className="bg-gray-300 text-gray-700 py-2 px-4 rounded-md" onClick={handlePreviousStep}>
                    Back
                  </button>
                  <button className="bg-blue-500 text-white py-2 px-4 rounded-md" onClick={handleNextStep}>
                    Next
                  </button>
                </div>
              </div>
            )}

            {step === 3 && (
              <div className="mt-6">
                <h2 className="text-xl font-semibold">Step 3: Select a Template</h2>
                <div className="grid grid-cols-2 gap-6 mt-4">
                  <div className="p-4 border rounded-lg text-center">
                    <p>Template 1</p>
                  </div>
                  <div className="p-4 border rounded-lg text-center">
                    <p>Template 2</p>
                  </div>
                  <div className="p-4 border rounded-lg text-center">
                    <p>Template 3</p>
                  </div>
                  <div className="p-4 border rounded-lg text-center">
                    <p>Template 4</p>
                  </div>
                </div>
                <div className="mt-6 flex justify-between">
                  <button className="bg-gray-300 text-gray-700 py-2 px-4 rounded-md" onClick={handlePreviousStep}>
                    Back
                  </button>
                  <button className="bg-blue-500 text-white py-2 px-4 rounded-md" onClick={() => setIsCreating(false)}>
                    Finish
                  </button>
                </div>
              </div>
            )}
          </div>
        ) : (
          <div className="flex justify-center items-center h-full">
            {/* PDF Viewer Placeholder */}
            <div className="w-2/3 h-96 border rounded-lg flex justify-center items-center bg-gray-100">
              <p className="text-gray-600">PDF Viewer (Example PDF)</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PresentationManager;
